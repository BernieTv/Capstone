// import { useEffect } from 'react';
// import { getRedirectResult } from 'firebase/auth';

// import {
// 	auth,
// 	signInWithGooglePopup,
// 	signInWithGoogleRedirect,
// 	createUserDocumentFromAuth,
// } from '../../utils/firebase/firebase.utils';




// useEffect(() => {
// 	const s = async () => {
// 		const response = await getRedirectResult(auth);

// 		if (response) {
// 			const userDocRef = await createUserDocumentFromAuth(response.user);
// 		}
// 	};
// 	s();
// }, []);

{/* <button onClick={signInWithGoogleRedirect}>Sign in with Google Redirect</button> */}





// useEffect(() => {
	// 	addCollectionAndDocuments('categories', SHOP_DATA);
	// }, []);


<Fragment key={title}>
					<h2>{title}</h2>
					<div className='products-container'>
						{categoriesMap[title].map((product) => (
							<ProductCard key={product.id} product={product} />
						))}
					</div>
				</Fragment>


// const [currentUser, setCurrentUser] = useState(null);



	// const [isCartOpen, setIsCartOpen] = useState(false);
	// const [cartItems, setCartItems] = useState([]);
	// const [cartCount, setCartCount] = useState(0);
	// const [cartTotal, setCartTotal] = useState(0);

	// useEffect(() => {
	// 	const newCartCount = cartItems.reduce(
	// 		(total, cartItem) => total + cartItem.quantity,
	// 		0
	// 	);
	// 	setCartCount(newCartCount);
	// }, [cartItems]);

	// useEffect(() => {
	// 	const newCartTotal = cartItems.reduce(
	// 		(total, cartItem) => total + cartItem.quantity * cartItem.price,
	// 		0
	// 	);
	// 	setCartTotal(newCartTotal);
	// }, [cartItems]);


	// const categoryMap = querySnapshot.docs.reduce((acc, docSnapshot) => {
	// 	const { title, items } = docSnapshot.data();
	// 	acc[title.toLowerCase()] = items;
	// 	return acc;
	// }, {});

	// return categoryMap;

//  const middleWares = [process.env.NODE_ENV !== 'production' && logger, thunk].filter(
//	Boolean
// );

export const fetchCategoriesAsync = () => async (dispatch) => {
	dispatch(fetchCategoriesStart());

	try {
		const categoriesArray = await getCategoriesAndDocuments('categories');
		dispatch(fetchCategoriesSuccess(categoriesArray));
	} catch (error) {
		dispatch(fetchCategoriesFailed(error));
	}
};



const unsubscribe = onAuthStateChangedListener((user) => {
			if (user) {
				createUserDocumentFromAuth(user);
			}
			dispatch(setCurrentUser(user));
		});

		return unsubscribe;




// switch (type) {
	// 	case USER_ACTION_TYPES.SIGN_IN_SUCCESS:
	// 		return { ...state, currentUser: payload };

	// 	case USER_ACTION_TYPES.SIGN_OUT_SUCCESS:
	// 		return { ...state, currentUser: null };

	// 	case USER_ACTION_TYPES.SIGN_OUT_FAILED:
	// 	case USER_ACTION_TYPES.SIGN_IN_FAILED:
	// 	case USER_ACTION_TYPES.SIGN_UP_FAILED:
	// 		if (payload.code === 'auth/user-not-found') {
	// 			alert('no user associated with this email');
	// 		}

	// 		if (payload.code === 'auth/wrong-password') {
	// 			alert('incorrect password for email');
	// 		}

	// 		if (payload.code === 'auth/email-already-in-use') {
	// 			alert('Cannot create user, email already in use');
	// 		}

	// 		return { ...state, error: payload };

	// 	default:
	// 		return state;
	// }